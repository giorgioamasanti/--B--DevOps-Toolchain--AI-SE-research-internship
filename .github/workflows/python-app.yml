name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Build executable
        run: |
          pyinstaller --onefile main.py
        env:
          VERSION: ${{ github.sha }}

      - name: Rename executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: mv dist/main dist/main-linux
      - name: Rename executable (macOS)
        if: matrix.os == 'macos-latest'
        run: mv dist/main dist/main-macos
      - name: Rename executable (Windows)
        if: matrix.os == 'windows-latest'
        run: mv dist/main.exe dist/main-windows.exe

      - name: Upload artifact for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: main-ubuntu
          path: dist/main-linux
      - name: Upload artifact for macOS
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: main-macos
          path: dist/main-macos
      - name: Upload artifact for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: main-windows
          path: dist/main-windows.exe

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact for Ubuntu
        uses: actions/download-artifact@v2
        with:
          name: main-ubuntu
          path: ./dist/
      - name: Download artifact for macOS
        uses: actions/download-artifact@v2
        with:
          name: main-macos
          path: ./dist/
      - name: Download artifact for Windows
        uses: actions/download-artifact@v2
        with:
          name: main-windows
          path: ./dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main-linux
          asset_name: main-linux
          asset_content_type: application/octet-stream

      - name: Upload Release Asset for macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main-macos
          asset_name: main-macos
          asset_content_type: application/octet-stream

      - name: Upload Release Asset for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main-windows.exe
          asset_name: main-windows.exe
          asset_content_type: application/octet-stream
